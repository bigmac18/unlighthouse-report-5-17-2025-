import { setMaxListeners } from 'node:events';
import { createUnlighthouse, useLogger } from '@unlighthouse/core';
import { createServer } from '@unlighthouse/server';
import open from 'better-opn';
import { c as createCli, p as pickOptions, v as validateHost, a as validateOptions } from './shared/cli.CpWxFivj.mjs';
import 'cac';
import 'node:url';
import 'defu';
import 'lodash-es';
import 'consola';

const cli = createCli();
const { options } = cli.parse();
async function run() {
  const start = /* @__PURE__ */ new Date();
  if (options.help || options.version)
    return;
  setMaxListeners(0);
  const unlighthouse = await createUnlighthouse(
    {
      ...pickOptions(options),
      hooks: {
        "resolved-config": async (config) => {
          await validateHost(config);
        }
      }
    },
    { name: "cli" }
  );
  validateOptions(unlighthouse.resolvedConfig);
  const { server, app } = await createServer();
  await unlighthouse.setServerContext({ url: server.url, server: server.server, app });
  const { routes } = await unlighthouse.start();
  const logger = useLogger();
  if (!routes.length) {
    logger.error("Failed to queue routes for scanning. Please check the logs with debug enabled.");
    process.exit(1);
  }
  unlighthouse.hooks.hook("worker-finished", async () => {
    const end = /* @__PURE__ */ new Date();
    const seconds = Math.round((end.getTime() - start.getTime()) / 1e3);
    logger.success(`Unlighthouse has finished scanning \`${unlighthouse.resolvedConfig.site}\`: ${unlighthouse.worker.reports().length} routes in \`${seconds}s\`.`);
    await unlighthouse.worker.cluster.close().catch(() => {
    });
  });
  if (unlighthouse.resolvedConfig.server.open)
    await open(unlighthouse.runtimeSettings.clientUrl);
}
run();
