{"version":3,"file":"sitemapper.js","names":["Sitemapper","constructor","options","settings","requestHeaders","url","timeout","timeoutTable","lastmod","debug","concurrency","retries","rejectUnauthorized","fields","proxyAgent","exclusions","fetch","a","arguments","b","_asyncToGenerator","length","results","sites","errors","console","concat","crawl","e","error","duration","timestamp","option","parse","requestOptions","method","resolveWithFullResponse","gzip","responseType","headers","https","agent","requester","got","get","initializeTimeout","response","statusCode","clearTimeout","data","responseBody","isGzip","rawBody","decompressResponseBody","body","parser","XMLParser","isArray","tagName","some","value","removeNSPrefix","toString","name","message","setTimeout","cancel","c","retryIndex","log","type","urlset","urlArray","Array","filter","site","modified","Date","getTime","isExcluded","loc","map","field","active","Object","entries","sitemapindex","sitemap","limit","pLimit","promiseArray","Promise","all","result","reduce","prev","getSites","callback","warn","err","resolve","reject","buffer","Buffer","from","zlib","gunzip","pattern","test","exports","default","module"],"sources":["../../src/assets/sitemapper.js"],"sourcesContent":["/**\n * Sitemap Parser\n *\n * Copyright (c) 2024 Sean Thomas Burke\n * Licensed under the MIT license.\n * @author Sean Burke <@seantomburke>\n */\n\nimport { XMLParser } from 'fast-xml-parser';\nimport got from 'got';\nimport zlib from 'zlib';\nimport pLimit from 'p-limit';\nimport isGzip from 'is-gzip';\n\n/**\n * @typedef {Object} Sitemapper\n */\nexport default class Sitemapper {\n  /**\n   * Construct the Sitemapper class\n   *\n   * @params {Object} options to set\n   * @params {string} [options.url] - the Sitemap url (e.g https://wp.seantburke.com/sitemap.xml)\n   * @params {Timeout} [options.timeout] - @see {timeout}\n   * @params {boolean} [options.debug] - Enables/Disables additional logging\n   * @params {integer} [options.concurrency] - The number of concurrent sitemaps to crawl (e.g. 2 will crawl no more than 2 sitemaps at the same time)\n   * @params {integer} [options.retries] - The maximum number of retries to attempt when crawling fails (e.g. 1 for 1 retry, 2 attempts in total)\n   * @params {boolean} [options.rejectUnauthorized] - If true (default), it will throw on invalid certificates, such as expired or self-signed ones.\n   * @params {lastmod} [options.lastmod] - the minimum lastmod value for urls\n   * @params {hpagent.HttpProxyAgent|hpagent.HttpsProxyAgent} [options.proxyAgent] - instance of npm \"hpagent\" HttpProxyAgent or HttpsProxyAgent to be passed to npm \"got\"\n   * @params {Array<RegExp>} [options.exclusions] - Array of regex patterns to exclude URLs\n   *\n   * @example let sitemap = new Sitemapper({\n   *   url: 'https://wp.seantburke.com/sitemap.xml',\n   *   timeout: 15000,\n   *   lastmod: 1630693759,\n   *   exclusions: [/foo.com/, /bar.xml/] // Filters out URLs matching these patterns\n   *  });\n   */\n  constructor(options) {\n    const settings = options || { requestHeaders: {} };\n    this.url = settings.url;\n    this.timeout = settings.timeout || 15000;\n    this.timeoutTable = {};\n    this.lastmod = settings.lastmod || 0;\n    this.requestHeaders = settings.requestHeaders;\n    this.debug = settings.debug;\n    this.concurrency = settings.concurrency || 10;\n    this.retries = settings.retries || 0;\n    this.rejectUnauthorized =\n      settings.rejectUnauthorized === false ? false : true;\n    this.fields = settings.fields || false;\n    this.proxyAgent = settings.proxyAgent || {};\n    this.exclusions = settings.exclusions || [];\n  }\n\n  /**\n   * Gets the sites from a sitemap.xml with a given URL\n   *\n   * @public\n   * @param {string} [url] - the Sitemaps url (e.g https://wp.seantburke.com/sitemap.xml)\n   * @returns {Promise<SitesData>}\n   * @example sitemapper.fetch('example.xml')\n   *  .then((sites) => console.log(sites));\n   */\n  async fetch(url = this.url) {\n    // initialize empty variables\n    let results = {\n      url: '',\n      sites: [],\n      errors: [],\n    };\n\n    // attempt to set the variables with the crawl\n    if (this.debug) {\n      // only show if it's set\n      if (this.lastmod) {\n        console.debug(`Using minimum lastmod value of ${this.lastmod}`);\n      }\n    }\n\n    try {\n      // crawl the URL\n      results = await this.crawl(url);\n    } catch (e) {\n      // show errors that may occur\n      if (this.debug) {\n        console.error(e);\n      }\n    }\n\n    return {\n      url,\n      sites: results.sites || [],\n      errors: results.errors || [],\n    };\n  }\n\n  /**\n   * Get the timeout\n   *\n   * @example console.log(sitemapper.timeout);\n   * @returns {Timeout}\n   */\n  static get timeout() {\n    return this.timeout;\n  }\n\n  /**\n   * Set the timeout\n   *\n   * @public\n   * @param {Timeout} duration\n   * @example sitemapper.timeout = 15000; // 15 seconds\n   */\n  static set timeout(duration) {\n    this.timeout = duration;\n  }\n\n  /**\n   * Get the lastmod minimum value\n   *\n   * @example console.log(sitemapper.lastmod);\n   * @returns {number}\n   */\n  static get lastmod() {\n    return this.lastmod;\n  }\n\n  /**\n   * Set the lastmod minimum value\n   *\n   * @public\n   * @param {number} timestamp\n   * @example sitemapper.lastmod = 1630694181; // Unix timestamp\n   */\n  static set lastmod(timestamp) {\n    this.lastmod = timestamp;\n  }\n\n  /**\n   *\n   * @param {string} url - url for making requests. Should be a link to a sitemaps.xml\n   * @example sitemapper.url = 'https://wp.seantburke.com/sitemap.xml'\n   */\n  static set url(url) {\n    this.url = url;\n  }\n\n  /**\n   * Get the url to parse\n   * @returns {string}\n   * @example console.log(sitemapper.url)\n   */\n  static get url() {\n    return this.url;\n  }\n\n  /**\n   * Setter for the debug state\n   * @param {boolean} option - set whether to show debug logs in output.\n   * @example sitemapper.debug = true;\n   */\n  static set debug(option) {\n    this.debug = option;\n  }\n\n  /**\n   * Getter for the debug state\n   * @returns {boolean}\n   * @example console.log(sitemapper.debug)\n   */\n  static get debug() {\n    return this.debug;\n  }\n\n  /**\n   * Requests the URL and uses fast-xml-parser to parse through and find the data\n   *\n   * @private\n   * @param {string} [url] - the Sitemaps url (e.g https://wp.seantburke.com/sitemap.xml)\n   * @returns {Promise<ParseData>}\n   */\n  async parse(url = this.url) {\n    // setup the response options for the got request\n    const requestOptions = {\n      method: 'GET',\n      resolveWithFullResponse: true,\n      gzip: true,\n      responseType: 'buffer',\n      headers: this.requestHeaders,\n      https: {\n        rejectUnauthorized: this.rejectUnauthorized,\n      },\n      agent: this.proxyAgent,\n    };\n\n    try {\n      // create a request Promise with the url and request options\n      const requester = got.get(url, requestOptions);\n\n      // initialize the timeout method based on the URL, and pass the request object.\n      this.initializeTimeout(url, requester);\n\n      // get the response from the requester promise\n      const response = await requester;\n\n      // if the response does not have a successful status code then clear the timeout for this url.\n      if (!response || response.statusCode !== 200) {\n        clearTimeout(this.timeoutTable[url]);\n        return { error: response.error, data: response };\n      }\n\n      let responseBody;\n\n      if (isGzip(response.rawBody)) {\n        responseBody = await this.decompressResponseBody(response.body);\n      } else {\n        responseBody = response.body;\n      }\n\n      // Parse XML using fast-xml-parser\n      const parser = new XMLParser({\n        isArray: (tagName) =>\n          ['sitemap', 'url'].some((value) => value === tagName),\n        removeNSPrefix: true,\n      });\n\n      const data = parser.parse(responseBody.toString());\n\n      // return the results\n      return { error: null, data };\n    } catch (error) {\n      // If the request was canceled notify the user of the timeout\n      if (error.name === 'CancelError') {\n        return {\n          error: `Request timed out after ${this.timeout} milliseconds for url: '${url}'`,\n          data: error,\n        };\n      }\n\n      // If an HTTPError include error http code\n      if (error.name === 'HTTPError') {\n        return {\n          error: `HTTP Error occurred: ${error.message}`,\n          data: error,\n        };\n      }\n\n      // Otherwise notify of another error\n      return {\n        error: `Error occurred: ${error.name}`,\n        data: error,\n      };\n    }\n  }\n\n  /**\n   * Timeouts are necessary for large xml trees. This will cancel the call if the request is taking\n   * too long, but will still allow the promises to resolve.\n   *\n   * @private\n   * @param {string} url - url to use as a hash in the timeoutTable\n   * @param {Promise} requester - the promise that creates the web request to the url\n   */\n  initializeTimeout(url, requester) {\n    // this will throw a CancelError which will be handled in the parent that calls this method.\n    this.timeoutTable[url] = setTimeout(() => requester.cancel(), this.timeout);\n  }\n\n  /**\n   * Recursive function that will go through a sitemaps tree and get all the sites\n   *\n   * @private\n   * @param {string} url - the Sitemaps url (e.g https://wp.seantburke.com/sitemap.xml)\n   * @param {integer} retryIndex - number of retry attempts fro this URL (e.g. 0 for 1st attempt, 1 for second attempty etc.)\n   * @returns {Promise<SitesData>}\n   */\n  async crawl(url, retryIndex = 0) {\n    try {\n      const { error, data } = await this.parse(url);\n      // The promise resolved, remove the timeout\n      clearTimeout(this.timeoutTable[url]);\n\n      if (error) {\n        // Handle errors during sitemap parsing / request\n        // Retry on error until you reach the retry limit set in the settings\n        if (retryIndex < this.retries) {\n          if (this.debug) {\n            console.log(\n              `(Retry attempt: ${retryIndex + 1} / ${\n                this.retries\n              }) ${url} due to ${data.name} on previous request`\n            );\n          }\n          return this.crawl(url, retryIndex + 1);\n        }\n\n        if (this.debug) {\n          console.error(\n            `Error occurred during \"crawl('${url}')\":\\n\\r Error: ${error}`\n          );\n        }\n\n        // Fail and log error\n        return {\n          sites: [],\n          errors: [\n            {\n              type: data.name,\n              message: error,\n              url,\n              retries: retryIndex,\n            },\n          ],\n        };\n      } else if (data && data.urlset && data.urlset.url) {\n        // Handle URLs found inside the sitemap\n        if (this.debug) {\n          console.debug(`Urlset found during \"crawl('${url}')\"`);\n        }\n\n        // Convert single object to array if needed\n        const urlArray = Array.isArray(data.urlset.url)\n          ? data.urlset.url\n          : [data.urlset.url];\n\n        // Begin filtering the urls\n        const sites = urlArray\n          .filter((site) => {\n            if (this.lastmod === 0) return true;\n            if (site.lastmod === undefined) return false;\n            const modified = new Date(site.lastmod).getTime();\n\n            return modified >= this.lastmod;\n          })\n          .filter((site) => {\n            return !this.isExcluded(site.loc);\n          })\n          .map((site) => {\n            if (!this.fields) {\n              return site.loc;\n            } else {\n              let fields = {};\n              for (const [field, active] of Object.entries(this.fields)) {\n                if (active && site[field]) {\n                  fields[field] = site[field];\n                }\n              }\n              return fields;\n            }\n          });\n\n        return {\n          sites,\n          errors: [],\n        };\n      } else if (data && data.sitemapindex) {\n        // Handle child sitemaps found inside the active sitemap\n        if (this.debug) {\n          console.debug(`Additional sitemap found during \"crawl('${url}')\"`);\n        }\n        // Map each child url into a promise to create an array of promises\n        const sitemap = data.sitemapindex.sitemap\n          .map((map) => map.loc)\n          .filter((url) => {\n            return !this.isExcluded(url);\n          });\n\n        // Parse all child urls within the concurrency limit in the settings\n        const limit = pLimit(this.concurrency);\n        const promiseArray = sitemap.map((site) =>\n          limit(() => this.crawl(site))\n        );\n\n        // Make sure all the promises resolve then filter and reduce the array\n        const results = await Promise.all(promiseArray);\n        const sites = results\n          .filter((result) => result.errors.length === 0)\n          .reduce((prev, { sites }) => [...prev, ...sites], []);\n        const errors = results\n          .filter((result) => result.errors.length !== 0)\n          .reduce((prev, { errors }) => [...prev, ...errors], []);\n\n        return {\n          sites,\n          errors,\n        };\n      }\n\n      // Retry on error until you reach the retry limit set in the settings\n      if (retryIndex < this.retries) {\n        if (this.debug) {\n          console.log(\n            `(Retry attempt: ${retryIndex + 1} / ${\n              this.retries\n            }) ${url} due to ${data.name} on previous request`\n          );\n        }\n        return this.crawl(url, retryIndex + 1);\n      }\n      if (this.debug) {\n        console.error(`Unknown state during \"crawl('${url})'\":`, error, data);\n      }\n\n      // Fail and log error\n      return {\n        sites: [],\n        errors: [\n          {\n            url,\n            type: data.name || 'UnknownStateError',\n            message: 'An unknown error occurred.',\n            retries: retryIndex,\n          },\n        ],\n      };\n    } catch (e) {\n      if (this.debug) {\n        this.debug && console.error(e);\n      }\n    }\n  }\n\n  /**\n   * Gets the sites from a sitemap.xml with a given URL\n   *\n   * @deprecated\n   * @param {string} url - url to query\n   * @param {getSitesCallback} callback - callback for sites and error\n   * @callback\n   */\n  async getSites(url = this.url, callback) {\n    console.warn(\n      // eslint-disable-line no-console\n      '\\r\\nWarning:',\n      'function .getSites() is deprecated, please use the function .fetch()\\r\\n'\n    );\n\n    let err = {};\n    let sites = [];\n    try {\n      const response = await this.fetch(url);\n      sites = response.sites;\n    } catch (error) {\n      err = error;\n    }\n    return callback(err, sites);\n  }\n\n  /**\n   * Decompress the gzipped response body using zlib.gunzip\n   *\n   * @param {Buffer} body - body of the gzipped file\n   * @returns {boolean}\n   */\n  async decompressResponseBody(body) {\n    return await new Promise((resolve, reject) => {\n      const buffer = Buffer.from(body);\n      zlib.gunzip(buffer, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  /**\n   * Checks if a urls is excluded based on the exclusion patterns.\n   *\n   * @param {string} url - The URL to check.\n   * @returns {boolean} Returns true if the urls is excluded, false otherwise.\n   */\n  isExcluded(url) {\n    if (this.exclusions.length === 0) return false;\n    return this.exclusions.some((pattern) => pattern.test(url));\n  }\n}\n\n/**\n * Callback for the getSites method\n *\n * @callback getSitesCallback\n * @param {Object} error - error from callback\n * @param {Array} sites - an Array of sitemaps\n */\n\n/**\n * Timeout in milliseconds\n *\n * @typedef {number} Timeout\n * the number of milliseconds before all requests timeout. The promises will still resolve so\n * you'll still receive parts of the request, but maybe not all urls\n * default is 15000 which is 15 seconds\n */\n\n/**\n * Resolve handler type for the promise in this.parse()\n *\n * @typedef {Object} ParseData\n *\n * @property {Error} error that either comes from fast-xml-parser or `got` or custom error\n * @property {Object} data\n * @property {string} data.url - URL of sitemap\n * @property {Array} data.urlset - Array of returned URLs\n * @property {string} data.urlset.url - single Url\n * @property {Object} data.sitemapindex - index of sitemap\n * @property {string} data.sitemapindex.sitemap - Sitemap\n * @example {\n *   error: 'There was an error!'\n *   data: {\n *     url: 'https://linkedin.com',\n *     urlset: [{\n *       url: 'https://www.linkedin.com/project1'\n *     },[{\n *       url: 'https://www.linkedin.com/project2'\n *     }]\n *   }\n * }\n */\n\n/**\n * Resolve handler type for the promise in this.parse()\n *\n * @typedef {Object} SitesData\n *\n * @property {string} url - the original url used to query the data\n * @property {SitesArray} sites\n * @property {ErrorDataArray} errors\n * @example {\n *   url: 'https://linkedin.com/sitemap.xml',\n *   sites: [\n *     'https://linkedin.com/project1',\n *     'https://linkedin.com/project2'\n *   ],\n *   errors: [\n *      {\n *        type: 'CancelError',\n *        url: 'https://www.walmart.com/sitemap_tp1.xml',\n *        retries: 0\n *      },\n *      {\n *        type: 'HTTPError',\n *        url: 'https://www.walmart.com/sitemap_tp2.xml',\n *        retries: 0\n *      },\n *   ]\n * }\n */\n\n/**\n * An array of urls\n *\n * @typedef {string[]} SitesArray\n * @example [\n *   'https://www.google.com',\n *   'https://www.linkedin.com'\n * ]\n */\n\n/**\n * An array of Error data objects\n *\n * @typedef {ErrorData[]} ErrorDataArray\n * @example [\n *    {\n *      type: 'CancelError',\n *      url: 'https://www.walmart.com/sitemap_tp1.xml',\n *      retries: 0\n *    },\n *    {\n *      type: 'HTTPError',\n *      url: 'https://www.walmart.com/sitemap_tp2.xml',\n *      retries: 0\n *    },\n * ]\n */\n\n/**\n * An object containing details about the errors which occurred during the crawl\n *\n * @typedef {Object} ErrorData\n *\n * @property {string} type - The error type which was returned\n * @property {string} url - The sitemap URL which returned the error\n * @property {number} errors - The total number of retries attempted after receiving the first error\n * @example {\n *    type: 'CancelError',\n *    url: 'https://www.walmart.com/sitemap_tp1.xml',\n *    retries: 0\n * }\n */\n"],"mappings":"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","ignoreList":[]}